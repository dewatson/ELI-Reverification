{
    "contents" : "# Load common utility functions\nsource(\"bin/common.R\")\n# Record results to an output file\noutFile <- file(\"results/nTvalidation.txt\", open = \"wt\")\nsink(outFile, append = FALSE)\ntimestamp()\n\n# Read in nitrite data and register column names\nnTdata <- read.csv(\"data/nT.csv\", \n                   header = TRUE,\n                   colClasses = \n                     c(\"character\",\"factor\",\"numeric\"))\nattach(nTdata)\n\n# Verify that the sample number, ID, and response are correct\ncat(\"\", \"Nitrite Validation\", \"\", \"Sample Data:\", sep=\"\\n\")\nnTdata\n\n# Calculate the mean, SD, and CV for each level\nntMeans <- aggregate(Response, by=list(ID), mean)\ncolnames(ntMeans) <- c(\"ID\", \"mean\")\nntStdDev <- aggregate(Response, by=list(ID), stddev)\ncolnames(ntStdDev) <- c(\"ID\", \"SD\")\nntCV <- aggregate(Response, by=list(ID), cv)\ncolnames(ntCV) <- c(\"ID\", \"CV\")\n\n# Unregister the nT data\ndetach(nTdata)\n\n# Build a table of the group statistics\ncat(\"\", \"Statistics:\", sep = \"\\n\")\nmerge(merge(ntMeans, ntStdDev), ntCV)\n\n# Read in carryover data and register column names\nCOdata <- read.csv('data/nTCO.csv', \n                   header = TRUE,\n                   colClasses = \n                     c(\"character\",\"character\",\"numeric\",\"logical\"))\n# Verify that the sample number, ID, and response are correct\ncat(\"\", \"High carryover data:\", sep = \"\\n\")\nCOdata\n\n# Assign the Decision Point\nDecisionPoint <- 200\n\n# Select Armbruster \"normal\" samples\nD_norm <- subset(COdata, Candidate == FALSE, select=Response)\n# Select Armbruster \"carryover candidate\" samples\nD_cc <- subset(COdata, Candidate == TRUE, select=Response)\n# Calculate the carryover\ncat(\"\\n\", \"Carryover (%): \", sep = \"\")\nwrite(carryover(D_cc$Response, D_norm$Response), \"\")\n\n# Calculate the CV of the normal samples\ncat(\"\\n\", \"CV of normal decision point samples: \", sep = \"\")\nwrite(round(100 * sd(D_norm$Response)/ mean(D_norm$Response), 1), \"\")\n\n# Unpaired, two-sample t.test using unequal variance (Welch):\n#   check whether the difference in means is <40 (20% of\n#   the decision level)\nt.test(D_cc$Response, \n       D_norm$Response, \n       mu = 0.2 * DecisionPoint, \n       alternative = \"less\"\n       )\n\n# Read in cross-reactivity data\ncrossrx <- read.csv('data/nTCR.csv', \n                    header = TRUE)\n\n# Calculate permanganate cross-reactivity\npermanganate <- subset(crossrx, \n                       Analyte == \"permanganate\", \n                       select = c(Concentration, Response)\n                       )\nattach(permanganate)\npermanganate_fit <- lm(Response ~ Concentration)\npermanganate_summary <- summary(permanganate_fit)\npct_permanganate_cr <- \n  100 * 200 * coef(permanganate_fit)[2]/ (200 - coef(permanganate_fit)[1])\ncat(\"\\n\", \"Permanganate cross-reactivity (%): \", sep = \"\")\nwrite(round(pct_permanganate_cr, 1), \"\")\ncat(\"\", \"Permanganate linear regression: \", sep = \"\\n\")\npermanganate_fit$coefficients\ndetach(permanganate)\n\n# Calculate PCC cross-reactivity\npcc <- subset(crossrx, \n              Analyte == \"pcc\", \n              select = c(Concentration, Response))\nattach(pcc)\npcc_fit <- lm(Response ~ Concentration)\npcc_summary <- summary(pcc_fit)\npct_pcc_cr <- \n  100 * 200 * coef(pcc_fit)[2]/ (200 - coef(pcc_fit)[1])\ncat(\"\\n\", \"PCC cross-reactivity (%): \", sep = \"\")\nwrite(round(pct_pcc_cr, 1), \"\")\ncat(\"\", \"PCC linear regression: \", sep = \"\\n\")\npcc_fit$coefficients\ndetach(pcc)\n\n# Calculate dichromate cross-reactivity\ndichromate <- subset(crossrx, \n                     Analyte == \"dichromate\", \n                     select = c(Concentration, Response))\nattach(dichromate)\ndichromate_fit <- lm(Response ~ Concentration)\ndichromate_summary <- summary(dichromate_fit)\npct_dichromate_cr <- \n  100 * 200 * coef(dichromate_fit)[2]/ (200 - coef(dichromate_fit)[1])\ncat(\"\\n\", \"Dichromate cross-reactivity (%): \", sep = \"\")\nwrite(round(pct_dichromate_cr, 1), \"\")\ncat(\"\", \"Dichromate linear regression: \", sep = \"\\n\")\ndichromate_fit$coefficients\ndetach(dichromate)\n\n# Calculate iodine cross-reactivity\niodine <- subset(crossrx, \n                 Analyte == \"iodine\", \n                 select = c(Concentration, Response))\niodine$Concentration <- 1000 * iodine$Concentration\nattach(iodine)\niodine_fit <- lm(Response ~ Concentration)\niodine_summary <- summary(iodine_fit)\npct_iodine_cr <- \n  100 * 200 * coef(iodine_fit)[2]/ (200 - coef(iodine_fit)[1])\ncat(\"\\n\", \"Iodine cross-reactivity (%): \", sep = \"\")\nwrite(round(pct_iodine_cr, 1), \"\")\ncat(\"\", \"Iodine linear regression: \", sep = \"\\n\")\niodine_fit$coefficients\ndetach(iodine)\n\n# Calculate hypochlorite cross-reactivity\nhypochlorite <- subset(crossrx, \n                       Analyte == \"hypochlorite\", \n                       select = c(Concentration, Response))\nnaocl_mw <- 74.44\nocl_mw <- 51.45\nhypochlorite$Concentration <- \n  10000 * hypochlorite$Concentration * ocl_mw / naocl_mw\nattach(hypochlorite)\nhypochlorite_fit <- lm(Response ~ Concentration)\nhypochlorite_summary <- summary(hypochlorite_fit)\npct_hypochlorite_cr <- \n  100 * 200 * coef(hypochlorite_fit)[2]/ (200 - coef(hypochlorite_fit)[1])\ncat(\"\\n\", \"Hypochlorite cross-reactivity (%): \", sep = \"\")\nwrite(round(pct_hypochlorite_cr, 1), \"\")\ncat(\"\", \"Hypochlorite linear regression: \", sep = \"\\n\")\nhypochlorite_fit$coefficients\ndetach(hypochlorite)\n\n# Save cross-reactivity data for plots\nsave(permanganate,\n     permanganate_fit, \n     permanganate_summary,\n     pcc,\n     pcc_fit, \n     pcc_summary,\n     dichromate,\n     dichromate_fit, \n     dichromate_summary,\n     iodine,\n     iodine_fit, \n     iodine_summary,\n     hypochlorite,\n     hypochlorite_fit, \n     hypochlorite_summary, \n     file=\"data/nTCR.Rdata\"\n)\n\n# Close output redirection and results file\nsink()\nclose(outFile)",
    "created" : 1393452002479.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3003671064",
    "id" : "ABCDBC33",
    "lastKnownWriteTime" : 1393521882,
    "path" : "~/Documents/ELI/Reverification/2014/bin/nT.R",
    "project_path" : "bin/nT.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}